from assetLibrary import *
import openpyxl
import yaml
import sys
import os
import json
import re
import requests
import yaml
from openpyxl.styles import PatternFill, Border, Side
#Script for vulnerability assessment for CISCO devices.
#Programmer Juan Davila

sharedir = '/x/x/x/x/x'
database = sharedir + 'assets.yml'

controlfile = sys.argv[1]

with open(controlfile) as file:
    # The FullLoader parameter handles the conversion from YAML
    # scalar values to Python the dictionary format
    control_file_items = yaml.load(file, Loader=yaml.FullLoader)
    sbus_to_work = control_file_items['sbu_list']
    #template = control_file_items['template_to_analyze']
    #cdes = control_file_items['cde_subnets']
    #sbu = control_file_items['sbu']
    #output = control_file_items['output']

def get_nist_reference(cve):
    print("RETREIVING CVE {}".format(cve))
    try:
        response = requests.get("https://services.nvd.nist.gov/rest/json/cves/1.0?keyword={}".format(cve))
        response.raise_for_status()
        # access JSOn content
        jsonResponse = response.json()
        reference = jsonResponse['result']['CVE_Items'][0]['cve']['references']['reference_data'][0]['url']
        if reference:
            return reference
    except:
        return "UNABLE TO RETREIVE REFERENCE"

def lookup_asa_version_advisories(json_data, new_version): #FUNCTION TO LOOKUP DEVICE VERSION INTO ASA ADVISORIES JSON DB.
    for entry in json_data:
            product_names = str(entry["product_names"])
            cvss_base_score = str(entry["cvss_base_score"])
            match = re.search(str(new_version), str(product_names))
            try:
                if float(entry["cvss_base_score"]) > float(7):
                    if match:
                        cves.append(entry["cves"]) #previous cves_ids
            except:
                print('INVALID SCORE {}'.format(entry["cvss_base_score"]))

def lookup_ios_version_advisories(json_data, new_version): #FUNCTION TO LOOKUP DEVICE VERSION INTO IOS ADVISORIES JSON DB.
    for entry in json_data:
            product_names = str(entry["product_names"])
            cvss_base_score = str(entry["cvss_base_score"])
            match = re.search(str(new_version), str(product_names))
            try:
                if match:
                    if float(entry["cvss_base_score"]) > float(7):
                        cves.append(entry["cves"])
            except:
                print('INVALID SCORE {}'.format(entry["cvss_base_score"]))

def lookup_iosxe_version_advisories(json_data, new_version): #FUNCTION TO LOOKUP DEVICE VERSION INTO IOS ADVISORIES JSON DB.
    for entry in json_data:
            product_names = str(entry["product_names"])
            cvss_base_score = str(entry["cvss_base_score"])
            match = re.search(str(new_version), str(product_names))
            try:
                if float(entry["cvss_base_score"]) > float(7):
                    if match:
                        cves.append(entry["cves"])
            except:
                print('INVALID SCORE {}'.format(entry["cvss_base_score"]))
def lookup_nxos_version_advisories(json_data, new_version): #FUNCTION TO LOOKUP DEVICE VERSION INTO IOS ADVISORIES JSON DB.
    for entry in json_data:
            product_names = str(entry["product_names"])
            cvss_base_score = str(entry["cvss_base_score"])
            refarticle = str(entry["cvrfUrl"])
            match = re.search(str(new_version), str(product_names))
            try:
                if float(entry["cvss_base_score"]) > float(7):
                    if match:
                        cves.append(entry["cves"])
            except:
                print('INVALID SCORE {}'.format(entry["cvss_base_score"]))

def lookup_cves_score(json_data, cve): #FUNCTION TO LOOKUP DEVICE VERSION INTO IOS ADVISORIES JSON DB.
    for entry in json_data:
            product_names = str(entry["product_names"])
            cvss_base_score = str(entry["cvss_base_score"])
            cve_id = str(entry["cves"])
            match = re.search(str(cve), str(cve_id))
            if cve in cve_id:
                return cvss_base_score
            
def lookup_cves_title(json_data, cve): #FUNCTION TO LOOKUP DEVICE VERSION INTO IOS ADVISORIES JSON DB.
    for entry in json_data:
            product_names = str(entry["product_names"])
            cvss_base_score = str(entry["cvss_base_score"])
            cve_id = str(entry["cves"])
            advisory_title = str(entry["advisory_title"])
            match = re.search(str(cve), str(cve_id))
            if cve in cve_id:
                return advisory_title
            
def lookup_ios_cves(json_data, cve): #FUNCTION TO LOOKUP DEVICE VERSION INTO IOS ADVISORIES JSON DB.
    for entry in json_data:
            product_names = str(entry["product_names"])
            cvss_base_score = str(entry["cvss_base_score"])
            cve_id = str(entry["cves"])
            refarticle = str(entry["publication_url"]) #URL ADVISORY
            match = re.search(str(cve), str(cve_id))
            if cve in cve_id:
                return refarticle

#####################
# Retreive Advisories #
#####################

cve_command = "openVulnQuery --config /home/fwrev/openVulnQuery/openVulnQuery/credentials.json --product IOS -c --json cves-ios.json"
print(os.system(cve_command))

cve_command = "openVulnQuery --config /home/fwrev/openVulnQuery/openVulnQuery/credentials.json --product NX-OS -c --json cves-nx-os.json"
print(os.system(cve_command))

cve_command = "openVulnQuery --config /home/fwrev/openVulnQuery/openVulnQuery/credentials.json --product ios_xe -c --json cves-ios-xe.json"
print(os.system(cve_command))

#GET ASA advisories
cve_command = "openVulnQuery --config /home/fwrev/openVulnQuery/openVulnQuery/credentials.json --product ASA -c --json cves-asa.json"
print(os.system(cve_command))


# Load YAML file into a Python dictionary and list
# available PCI programs (top-level dictionary key)
#
assetDict = loadAssetDictionary(database)

#sbus_to_work list = []
for sbu in sbus_to_work:
    wb = openpyxl.load_workbook('template.xlsx')
    del wb["Sheet1"]
    asset_file = assetDict[sbu]
    hostnames = list(assetDict[sbu].keys())
    print(sbu)
    dict_host_cve = []
    for hostname in hostnames:
        print("CREATING SHEET FOR {}".format(hostname))
        sheet = wb.create_sheet('{}'.format(hostname))
        thin_border = Border(left=Side(style='thin'), 
                     right=Side(style='thin'), 
                     top=Side(style='thin'), 
                     bottom=Side(style='thin'))
        sheet['A1'] = 'HOSTNAME'
        sheet["A1"].fill = PatternFill("solid", start_color="0099CCFF")
        sheet["A1"].border = thin_border
        sheet['B1'] = 'MANAGEMENT IP'
        sheet["B1"].fill = PatternFill("solid", start_color="0099CCFF")
        sheet["B1"].border = thin_border
        sheet['C1'] = 'CVE'
        sheet["C1"].fill = PatternFill("solid", start_color="0099CCFF")
        sheet["C1"].border = thin_border
        sheet['D1'] = 'ADVISORY TITLE'
        sheet["D1"].fill = PatternFill("solid", start_color="0099CCFF")
        sheet["D1"].border = thin_border
        sheet['E1'] = 'REFERENCE ARTICLE'
        sheet["E1"].fill = PatternFill("solid", start_color="0099CCFF")
        sheet["E1"].border = thin_border
        sheet['F1'] = 'CVSS-SCORE'
        sheet["F1"].fill = PatternFill("solid", start_color="0099CCFF")
        sheet["F1"].border = thin_border
        sheet['G1'] = 'OS-VERSION'
        sheet["G1"].fill = PatternFill("solid", start_color="0099CCFF")
        sheet["G1"].border = thin_border
        cves = []
        cves2 = []
        sec_attributes = []
        device_attributes = assetDict[sbu][hostname]
        mngt_ip = device_attributes[1]
        os_ver = device_attributes[5]
        if os_ver != None:
            if 'Cisco IOS' in os_ver: ## EXTRACT OS VERSION AND LOOKUP CVES FOR IOS
                file = open('cves-ios.json','r')
                json_data = json.load(file)
                version_elements = os_ver.split()
                version = version_elements[2]
                new_version = re.sub("[()]", ".", str(version))
                if '.' in new_version[-1]:
                    new_version = new_version[:-1]
                lookup_ios_version_advisories(json_data, new_version)
                lookup_ios_version_advisories(json_data, version)
                for i in cves:
                    if i not in cves2:
                        cves2.append(i)
                print(hostname, os_ver, cves2)
                    
            if 'IOS XE Software' in os_ver: ## EXTRACT OS VERSION AND LOOKUP CVES FOR IOS XE
                version_elements = os_ver.split()
                version = version_elements[3]
                file = open('cves-ios-xe.json','r')

                json_data = json.load(file)
                lookup_iosxe_version_advisories(json_data, os_ver)
                lookup_iosxe_version_advisories(json_data, version)
                for i in cves:
                    if i not in cves2:
                        cves2.append(i)
                print(hostname, os_ver, cves2)
                
            if 'NX-OS Software' in os_ver: ## EXTRACT OS VERSION AND LOOKUP CVES FOR NX-OS
                elements = os_ver.split()
                version_number = elements[2]
                new_version = re.sub("[()]", ".", str(version_number))
                if '.' in new_version[-1]:
                    new_version = new_version[:-1]
                file = open('cves-nx-os.json','r')
                json_data = json.load(file)
                lookup_nxos_version_advisories(json_data, version_number)
                lookup_nxos_version_advisories(json_data, new_version)
                for i in cves:
                    if i not in cves2:
                        cves2.append(i)
                print(hostname, os_ver, cves2)
                
            if 'ASA' in os_ver: ## EXTRACT OS VERSION AND LOOKUP CVES FOR ASA
                version_elements = os_ver.split()
                version = version_elements[1]
                new_version = re.sub("[()]", ".", str(version))
                if '.' in new_version[-1]:
                    new_version = new_version[:-1]
                print("*****ASA VERSION TO LOOK {}****".format(new_version))
                file = open('cves-asa.json','r')
                json_data = json.load(file)
                lookup_asa_version_advisories(json_data, new_version)
                lookup_asa_version_advisories(json_data, version)
                for i in cves:
                    if i not in cves2:
                        cves2.append(i)
            print("CVES FOR {}".format(hostname))
            row_n = 2
            for item in cves2:
                for i in item:
                    print("LOOKING CVE: {}".format(i))
                    reference = lookup_ios_cves(json_data, i)
                    cvss_score = lookup_cves_score(json_data, i)
                    advisory_title = lookup_cves_title(json_data, i)
                    tup = ("{}".format(i),"{}".format(reference))
                    sec_attributes.append(tup)
                    print("HOSTNAME: {}, CVE: {}, REF: {}, CVSS: {}".format(hostname, i, reference, cvss_score))
                    for row in sheet.rows:
                        sheet['A{}'.format(row_n)] = hostname
                        sheet['B{}'.format(row_n)] = mngt_ip
                        sheet['C{}'.format(row_n)] = i
                        sheet['D{}'.format(row_n)] = advisory_title
                        sheet['E{}'.format(row_n)] = reference
                        sheet['F{}'.format(row_n)] = cvss_score
                        sheet['G{}'.format(row_n)] = os_ver
                    row_n +=1
            
            wb.save('{}-cves.xlsx'.format(sbu))
